import FormSubmitButton from "@/components/FormSubmitButton";
import { prisma } from "@/lib/db/prisma";
import { redirect } from "next/navigation";
import React from "react";
import mime from "mime";
import { join } from "path";
import { stat, mkdir, writeFile } from "fs/promises";
import { NextRequest, NextResponse } from "next/server";
import _ from "lodash";
import { uploadToS3 } from "@/lib/s3";
export const metadata = {
  title: "Add product E-commerce",
  description: "Generated by create next app",
};
async function addProduct(formData: FormData) {
  "use server";
  const name = formData.get("name")?.toString();

  const image = formData.getAll("url") as File[];

  const uploadedFilex = [];
  if (!name || image?.length === 0) {
    throw Error("Missing required fields");
  }
  for (const file of image) {
    const buffer = await file.arrayBuffer(); // Convert file to a buffer
    const s3Key = `products/${Date.now()}-${file.name}`;
    const fileUrl = await uploadToS3(buffer, s3Key, file.type);
    uploadedFilex.push({
      name: file.name,
      key: s3Key,
      url: fileUrl,
    });
  }
  await prisma.category.create({
    data: {
      name,
      image: {
        create: uploadedFilex.map((file) => ({
          name: file.name,
          url: file.url,
          key: file.key,
        })),
      },
    },
  });

  redirect("/");
}

const page = () => {
  return (
    <div>
      <h1 className="mb-3 text-lg font-bold">Add Category</h1>
      <form action={addProduct}>
        <input
          required
          type="text"
          placeholder="name"
          name="name"
          className="input-bordered input mb-3 w-full"
        />

        <input
          required
          type="file"
          placeholder="image url"
          name="url"
          multiple
          className="input-bordered input mb-3 w-full"
        />

        <FormSubmitButton className="btn-primary btn-block btn" type="submit">
          Add Category
        </FormSubmitButton>
      </form>
    </div>
  );
};

export default page;
