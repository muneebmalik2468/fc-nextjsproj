generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  description  String
  imageUrl     File[]
  name         String
  price        Int
  ComparePrice Int         @default(0)
  categoryID   String      @db.ObjectId
  category     Category    @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  CartItem     CartItem[]
  OrderItem    OrderItem[]

  @@map("products")
}

model Adminuser {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String?
  password String?
  status   Boolean @default(true)

  @@map("adminuser")
}

model File {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url        String
  name       String
  key        String
  createdAt  DateTime  @default(now())
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  String?   @db.ObjectId
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  @@map("files")
}

model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?     @db.ObjectId
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map("carts")
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  createdAt   DateTime    @default(now())
  name        String
  phnno       String
  adsress     String
  codmode     String      @default("Normal")
  status      String      @default("pending")
  orderid     Int
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?     @db.ObjectId

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?  @db.ObjectId

  @@map("orderitems")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  image     File[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("categories")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Order         Order[]
  File          File[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
